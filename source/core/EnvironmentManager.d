module core.EnvironmentManager;

/// Struct to keep used directorys organized
static struct EnvironmentManager {
    import std.experimental.logger : FileLogger;


    public static:
    /// Directory containing packageD configuration files
    string configDirectory;
    /// Directory for temporary files generated by packageD
    string tmpDirectory;
    /// Directory containing log 
    string logDirectory;
    /// Sharedlogger
    FileLogger sharedLogger;

    /// Initialize Environment Manager
    void initialize() {
        version(Windows) {
            configDirectory = setupFolder("dConfig", "C:\\.packageD\\config\\");
            tmpDirectory = setupFolder("dTmp", "C:\\.packageD\\tmp\\");
            logDirectory = setupFolder("dLog", "C:\\.packageD\\log\\");
        } else version(linux) { 
            configDirectory = setupFolder("dConfig", "/etc/packageD/");
            tmpDirectory = setupFolder("dTmp", "/tmp/packageD/");
            logDirectory = setupFolder("dLog", "/var/log/packageD/");
        } else {
            import std.stdio : writeln;
            import std.stdio : readln;
            writeln("OS NOT SUPPORTED YET!");
            writeln("Press any key to continue...");
            readln();
            exit(1);
    
            setupLogger();
        }
    }

    private: 
    string setupFolder(string env, string path) {
        import std.process : environment;
        if(environment.get(env)) {
            return environment.get(env);
        } else {
            import std.file : exists, mkdirRecurse;
            if(!exists(path)) 
                mkdirRecurse(path);
            return path;
        }
    }

    void setupLogger() {
        import std.datetime.systime : Clock;
        import std.string : format;
        import std.experimental.logger : log;
        sharedLogger = new FileLogger(format("%s%s.log",logDirectory, "Test"));
        sharedLogger.log("Logging!");
    }
}